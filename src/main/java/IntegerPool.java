/*
       Класс Integer — это класс-обертка примитивного типа int. Внутри данного класса содержится единственное поле типа int.
       Integer — это ссылочный тип данных, и его переменные хранят ссылки на значения, а не сами значения (объекты).

       Если  необходимо проверить, не ссылаются ли две переменных на один и тот же объект, либо сравнить на равенство два примитива,
       то используется оператор "==".
       Оператор == не сравнивает на равенство внутреннее содержимое объектов, а просто проверяет указывают ли ссылки на один и тот же объект.
       Оператор == возвращает логический результат boolean после сравнения: истина либо ложь (true / false)
       Таким образом, при сравнении объектов в Java оператор "==" вернет true лишь в том случае, когда ссылки указывают на один и тот же объект.

       Для более эффективного использования памяти и для повышения производительности при обработке целых чиселв в
       Java используются так называемые пулы: Integer pool, String pool и некотоыре другие.

       Когда мы создаем объект, не используя операцию new, объект помещается в пул, и в последствии, если мы захотим создать такой же объект
       (опять не используя new), то новый объект создан не будет, а мы просто получим ссылку на наш объект из пула.
       Особенность Integer pool'а в том, что он хранит только числа, которые помещаются в тип данных byte: от -128 до 127.
       Для остальных чисел из Integer'а пул не работает.

       Если необходимо сравнить именно внутреннее содержимое объектов,
       на которые ссылаются данные переменные, то стоит воспользоваться методом соответствующего класса equals() или hashCode()).
       Чтобы безошибочно проверять на равенство две Integer переменные, необходимо использовать метод equals.
       https://javarush.ru/groups/posts/2743-rukovodstvo-po-klassu-java-integer
       */


public class IntegerPool {
    public static void main(String[] args) {
        Integer a = 5;
        Integer b = 5;
        Integer c = 127;
        Integer d = 127;
        Integer e = 128;
        Integer f = 128;
        Integer g = -128;
        Integer h = -128;
        Integer i = -129;
        Integer j = -129;
        Integer k = new Integer(5);


        System.out.println("Особенность Integer pool'а в том, что он хранит числа, которые помещаются в тип данных byte: от -128 до 127." +
               "\n"+
                "Когда мы создаем новую переменную и присваиваем ей целочисленное значение, лежащее в промежутке от -128 до 127," +
                " мы не создаем новый объект, а присваиваем переменной ссылку на уже созданный объект в кэше.");
        System.out.print("Cравниваем две переменные, которые хранят в себе ссылки на один и тот же объект " + a + " и "+ b + ": ");
        System.out.println(a == b);
        System.out.print("Cравниваем две переменные, которые хранят в себе ссылки на один и тот же объект " + c + " и "+ d + ": ");
        System.out.println(c == d);
        System.out.print("Cравниваем две переменные, которые хранят в себе ссылки на один и тот же объект, но за пределами pool'а " + e + " и "+ f + ": ");
        System.out.println(e == f);
        System.out.print("Cравниваем две переменные, которые хранят в себе ссылки на один и тот же объект " + g + " и "+ h + ": ");
        System.out.println(g==h);
        System.out.print("Cравниваем две переменные, которые хранят в себе ссылки на один и тот же объект, но за пределами pool'а " + i + " и "+ j + ": ");
        System.out.println(i==j);
        System.out.print("Сравниваем две переменные, ссылающиеся на два разных объекта " + b + " и "+ k + ": ");
        System.out.println(b==k);
        System.out.print("Сравниваем две переменные, ссылающиеся на два разных объекта через equals " + i + " и "+ j + ": ");
        System.out.println(i.equals(j));

    }
}
